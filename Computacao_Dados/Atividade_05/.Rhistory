1+1
10^5
2^2
q()
5**5
25**0.5
5^5
25>0.5
25^0.5
c <- (2:4)*2
getwd()
lista <- (1:30,2)
lista <- (1:30:2)
lista <- (1:30)
summary(lista)
X <-c (NA, 3, 14, NA, 33, 17, NA, 41)
X <-c (NA, 3, 14, NA, 33, 17, NA, 41)
which(x, na.rm = TRUE)
X <-c (NA, 3, 14, NA, 33, 17, NA, 41)
which(x, na.rm = TRUE)
piratesurvey <- data.frame(
name = c("Astrid", "Lea", "Sarina", "Remon", "Letizia", "Babice", "Jonas", "Wendy", "Niveditha", "Gioia"),
sex = c("F", "F", "F", "M", "F", "F", "M", "F", "F", "F"),
age = c(30, 25, 25, 29, 22, 22, 35, 19, 32, 21),
superhero = c("Batman", "Superman", "Batman", "Spiderman", "Batman",
"Antman", "Batman", "Superman", "Maggott", "Superman"),
tattoos = c(11, 15, 12, 5, 65, 3, 9, 13, 900, 0),
stringsAsFactors = FALSE
)
View(piratesurvey)
View(piratesurvey)
View(piratesurvey)
View(piratesurvey)
View(piratesurvey)
View(piratesurvey)
View(piratesurvey)
view(piratesurvey)
summary(piratesurvey)
median(piratesurvey$age)
P_masculinos <- piratesurvey[piratesurvey$sex == "M"]
P_masculinos <- piratesurvey[piratesurvey$sex == "M", ]
P_masculinos <- meam(piratesurvey[piratesurvey$sex == "M", ])
P_femininos <- meam(piratesurvey[piratesurvey$sex == "F", ])
P_femininos <- piratesurvey[piratesurvey$sex == "F", ]
P_masculinos <- piratesurvey[piratesurvey$sex == "M", ]
P_femininos <- piratesurvey[piratesurvey$sex == "F", ]
P_femininos <- piratesurvey[piratesurvey$sex == "F", "age"]
P_masculinos <- piratesurvey[piratesurvey$sex == "M", "age"]
P_femininos <- piratesurvey[piratesurvey$sex == "F", "age"]
P_masculinos <- meam(piratesurvey[piratesurvey$sex == "M", "age"])
P_femininos <- mean(piratesurvey[piratesurvey$sex == "F", "age"])
P_masculinos <- meam(piratesurvey[piratesurvey$sex == "M", "age"])
P_femininos <- mean(piratesurvey[piratesurvey$sex == "F", "age"])
P_masculinos <- meam(piratesurvey[piratesurvey$sex == "M", "age"])
P_masculinos <- mean(piratesurvey[piratesurvey$sex == "M", "age"])
T_masculino <- max(piratesurvey[piratesurvey$sex == "F", "tattoos"])
P_age_femininos <- piratesurvey[piratesurvey$sex == "F", "age"] /  piratesurvey[piratesurvey$sex == "F", "age" < 32]
View(P_age_femininos)
P_age_femininos <- sum(piratesurvey[piratesurvey$sex == "F", "age"]) /  (piratesurvey[piratesurvey$sex == "F", "age" < 32])
P_age_femininos <- sum(piratesurvey[piratesurvey$sex == "F", "age"]) /  (piratesurvey[piratesurvey$sex == "F", "age" < 32])
P_age_femininos <- sum(piratesurvey[piratesurvey$sex == "F", "age"]) /  sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, "age"])
sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, "age"])
P_age_femininos <- sum(piratesurvey[piratesurvey$sex == "F", ]) /  sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
P_age_femininos <- sum(piratesurvey[piratesurvey$sex == "F",]) /  sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]
P_age_femininos <- length(piratesurvey[piratesurvey$sex == "F",]) /  length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
View(piratesurvey)
View(piratesurvey)
piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]
piratesurvey[piratesurvey$sex == "F", ]
P_age_femininos <- length(piratesurvey[piratesurvey$sex == "F",]) /  length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]
length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]
length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]
l]
sum(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
P_age_femininos <- length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]) / length(piratesurvey[piratesurvey$sex == "F", ])
P_age_femininos <- length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]) / length(piratesurvey[piratesurvey$sex == "F", ])
length(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
length(piratesurvey[piratesurvey$sex == "F", ])
piratesurvey[piratesurvey$sex == "F", ]
P_age_femininos <- nrow(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]) / nrow(piratesurvey[piratesurvey$sex == "F", ])
P_age_femininos <- nrow(piratesurvey[piratesurvey$sex == "F",]) /  nrow(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ])
P_age_femininos <- nrow(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]) / nrow(piratesurvey[piratesurvey$sex == "F", ])
P_age_femininos <- nrow(piratesurvey[piratesurvey$sex == "F" & piratesurvey$age < 32, ]) / nrow(piratesurvey[piratesurvey$sex == "F", ])
mouse <- data.frame(
color = c("purple", "red", "yellow","brown"),
weight = c(23, 21, 18, 26),
stringsAsFactors = FALSE
)
mouse.info <- data.frame(colour=mouse.color,weight=mouse.weight)
mouse.color <- c('purple','red','yellow','brown')
mouse.weight <- c(23,21,18,26)
mouse.info <- data.frame(colour=mouse.color,weight=mouse.weight)
str(mouse.info)
mouse.info
head(mouse.info, 3)
mouse.info[3,]
ouse.info[,1]
mouse.info[3,]
mouse.info[,1]
mouse.info[4,1]
airquality
View(airquality)
View(airquality)
min(airquality$Ozone[airquality$Month == 5], na.rm = TRUE)
sub_air <- airquality[airquality$Ozone > 25, airquality&Temp< 90]
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp< 90, ]
subset_data <- airquality[airquality$Ozone > 25 & airquality$Temp < 90, ]
mouse.color <- c('purple','red','yellow','brown')
mouse.weight <- c(23,21,18,26)
mouse.info <- data.frame(colour=mouse.color,weight=mouse.weight)
mouse.info
str(mouse.info)
mouse.info
mouse.info[3,]
mouse.info[4,1]
airquality
min(airquality$Ozone[airquality$Month == 5], na.rm = TRUE)
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp< 90, ]
min(airquality$Ozone[airquality$Month == 5], na.rm = TRUE)
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp< 90, ]
subset_data <- airquality[airquality$Ozone > 25 & airquality$Temp < 90, ]
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp < 90, ]
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp < 90, ]
sub_air <- airquality[airquality$Ozone > 25 & airquality&Temp < 90, ]
sub_air <- airquality[airquality$Ozone > 25 & airquality$Temp < 90, ]
sub_air <- airquality[airquality$Ozone > 25 & airquality$Temp < 90, ]
sub_air
View(sub_air)
View(sub_air)
sub_air <- airquality[airquality$Ozone > 25 & airquality$Temp < 90, ]
mean(sub_air$Solar.R)
mean(sub_air$Solar.R, na.rm = TRUE)
sum(complete.cases(airquality))
getwd()
setwd("C:/Faculdade/Repositorios/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Atividade_05")
apply(iris[ , 1:4], 1, FUN = mean)
apply(iris, 2, FUN = mean)
colMeans(iris)
apply(iris[ , 1:4], 2, FUN = mean)
sapply(iris[ , 1:4], FUN = mean)
mapply(iris[ , 1:4], mean)
apply(iris[1:4, ], 2, FUN = mean)
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris[,3], iris$Species, mean)
with(iris, tapply(Petal.Length, Species, mean))
sapply(iris, 2, mean)
mapply(iris$Petal.Length, iris$Species, mean)
mean(iris$Petal.Length, iris$Species)
mapply(rep, c("Rural", "Amo"), 10:1, SIMPLIFY = FALSE)
mapply(rep, c("Rural", "Amo"), 10:1,
mapply(rep, c("Rural", "Amo"), 10:1,)
mapply(rep, c("Rural", "Amo"), 10:1)
SIMPLIFY = FALSE)
mapply(rep, c("Rural", "Amo"), 10:1, SIMPLIFY = FALSE)
mapply(rep,c("Rural","Amo"),10:1,SIMPLIFY=FALSE)
apply(USArrests, margin, sum)
apply(USArrests, 2, sum)
apply(USArrests, 2, sum)
View(USArrests)
apply(USArrests, 1, sum)
apply(USArrests, 2, sum)
print(sapply(1:3,function(x)x:10+x-1))
mult(10)
y <- 5
mult <- function(x, y){
return(x*y)
}
mult(10)
View(mult)
y <- 5
mult <- function(x, y){
return(x*y)
}
mult(10)
mult <- function(x){
return(x*y)
}
mult(10)
View(USArrests)
USArrests
barplot(USArrests)
colnames(USArrests)
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!estados %in% row.names(USArrests)){
return("Estado Inválido")
}
else if (!tiposPrisoes %in% colnames(USArrests)){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!estados %in% row.names(USArrests)){
return("Estado Inválido")
}
else if (!tiposPrisoes %in% colnames(USArrests)){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!estados %in% rownames(USArrests)){
return("Estado Inválido")
}
else if (!tiposPrisoes %in% colnames(USArrests)){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes <- function(estados, tiposPrisoes) {
# Carregar o dataset USArrests
data(USArrests)
# Verificar se o estado é válido
if (!estados %in% rownames(USArrests)) {
return("Estado Inválido")
}
# Verificar se o tipo de prisão é válido
if (!tiposPrisoes %in% colnames(USArrests)) {
return("Tipo de Prisão Inválida")
}
# Retornar a soma das prisões
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!estados %in% rownames(USArrests)){
return("Estado Inválido")
}
else if (!tiposPrisoes %in% colnames(USArrests)){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
View(prisoes)
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!estados %in% rownames(USArrests)){
return("Estado Inválido")
}
else if (!all(tiposPrisoes %in% colnames(USArrests))){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes(estados=c("California ","Miami", "Arizona"), tiposPrisoes=("Assault"))
prisoes <- function(estados, tiposPrisoes){
data(USArrests)
if (!all(estados %in% rownames(USArrests))){
return("Estado Inválido")
}
else if (!all(tiposPrisoes %in% colnames(USArrests))){
return("Tipo de Prisão Inválida")
}
return(sum(USArrests[estados, tiposPrisoes], na.rm = TRUE))
}
prisoes(estados=c("California ","Miami", "Arizona"), tiposPrisoes=("Assault"))
prisoes(estados="Tennessee", tiposPrisoes=c("Rape","Murder"))
prisoes(estados=c("California ","Miami", "Arizona"), tiposPrisoes=("Assault"))
prisoes(estados=c("Pennsylvania","Mississippi", "Nebraska"), tiposPrisoes=c("Rape","UrbanPop","Assault"))
prisoes(estados=c("Vermont","Wisconsin", "Texas"), tiposPrisoes=c("Rape","Assalto"))
minhasNotas_1 <- function(Exe_1=0, VA_1=0, Exe_2=0, Proj=0, VA_2=0, VA_3=0, Opt=1, threshold=7) {
# Função para verificar se as notas estão dentro do intervalo válido
verificar_notas <- function(nota) {
if (nota < 0 | nota > 10) {
stop("Notas devem estar entre 0 e 10.")
}
}
# Verificar as notas para garantir que estão dentro do intervalo permitido
lapply(c(Exe_1, VA_1, Exe_2, Proj, VA_2, VA_3), verificar_notas)
# Substituir NAs por zero
Exe_1 <- ifelse(is.na(Exe_1), 0, Exe_1)
VA_1 <- ifelse(is.na(VA_1), 0, VA_1)
Exe_2 <- ifelse(is.na(Exe_2), 0, Exe_2)
Proj <- ifelse(is.na(Proj), 0, Proj)
VA_2 <- ifelse(is.na(VA_2), 0, VA_2)
VA_3 <- ifelse(is.na(VA_3), 0, VA_3)
# Função para calcular a média ponderada
media_ponderada <- function(notas, pesos) {
sum(notas * pesos) / sum(pesos)
}
# Cálculos das médias
media_VA_1 <- media_ponderada(c(Exe_1, VA_1, Exe_2, Proj, VA_2), c(5, 5, 2, 5, 3))
media_VA_2 <- media_ponderada(c(Exe_2, VA_2, Proj), c(5, 3, 2))
media_VA_3 <- VA_3
# Mensagem para opção 1 (Média 1VA)
if (Opt == 1) {
if (Exe_1 == 0 | VA_1 == 0 | Exe_2 == 0 | Proj == 0 | VA_2 == 0) {
return("Aluno não possui nota para a 1 VA")
}
if (media_VA_1 >= threshold) {
return(paste("Média da 1VA:", round(media_VA_1, 1), "-- Acima da Média"))
} else {
return(paste("Média da 1VA:", round(media_VA_1, 1), "-- Abaixo da Média"))
}
}
# Mensagem para opção 2 (Média 2VA)
if (Opt == 2) {
if (Exe_2 == 0 | VA_2 == 0 | Proj == 0) {
return("Aluno não possui nota para a 2 VA")
}
if (media_VA_2 >= threshold) {
return(paste("Média da 2VA:", round(media_VA_2, 1), "-- Acima da Média"))
} else {
return(paste("Média da 2VA:", round(media_VA_2, 1), "-- Abaixo da Média"))
}
}
# Mensagem para opção 3 (Média 3VA)
if (Opt == 3) {
if (VA_3 == 0) {
return("Aluno não possui nenhuma nota -- Reprovado!!")
}
if (media_VA_3 >= threshold) {
return(paste(round(media_VA_3, 1), "-- Aprovado!!"))
} else if (media_VA_3 >= threshold / 2) {
return(paste(round(media_VA_3, 1), "-- Na Final!!"))
} else {
return(paste(round(media_VA_3, 1), "-- Reprovado!!"))
}
}
# Mensagem para opção 4 (Média Final)
if (Opt == 4) {
medias <- c(media_VA_1, media_VA_2, media_VA_3)
medias <- sort(medias, decreasing = TRUE)[1:2]  # Pega as duas maiores médias
media_final <- mean(medias)
if (media_final >= threshold) {
return(paste("Média Final:", round(media_final, 1), "-- Aprovado!!"))
} else if (media_final >= threshold / 2) {
return(paste("Média Final:", round(media_final, 1), "-- Na Final!!"))
} else {
return(paste("Média Final:", round(media_final, 1), "-- Reprovado!!"))
}
}
# Caso a opção seja inválida
stop("Opção inválida! Escolha entre 1, 2, 3 ou 4.")
}
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
minhasNotas_1 <- function(Exe_1=0, VA_1=0, Exe_2=0, Proj=0, VA_2=0, VA_3=0, Opt=1, threshold=7) {
# Função para verificar se as notas estão dentro do intervalo válido
verificar_notas <- function(nota) {
if (nota < 0 | nota > 10) {
stop("Notas devem estar entre 0 e 10.")
}
}
# Verificar as notas para garantir que estão dentro do intervalo permitido
lapply(c(Exe_1, VA_1, Exe_2, Proj, VA_2, VA_3), verificar_notas)
# Substituir NAs por zero
Exe_1 <- ifelse(is.na(Exe_1), 0, Exe_1)
VA_1 <- ifelse(is.na(VA_1), 0, VA_1)
Exe_2 <- ifelse(is.na(Exe_2), 0, Exe_2)
Proj <- ifelse(is.na(Proj), 0, Proj)
VA_2 <- ifelse(is.na(VA_2), 0, VA_2)
VA_3 <- ifelse(is.na(VA_3), 0, VA_3)
# Função para calcular a média ponderada
media_ponderada <- function(notas, pesos) {
sum(notas * pesos) / sum(pesos)
}
# Cálculos das médias
media_VA_1 <- media_ponderada(c(Exe_1, VA_1, Exe_2, Proj, VA_2), c(5, 5, 2, 5, 3))
media_VA_2 <- media_ponderada(c(Exe_2, VA_2, Proj), c(5, 3, 2))
media_VA_3 <- VA_3
# Mensagem para opção 1 (Média 1VA)
if (Opt == 1) {
if (Exe_1 == 0 | VA_1 == 0 | Exe_2 == 0 | Proj == 0 | VA_2 == 0) {
return("Aluno não possui nota para a 1 VA")
}
if (media_VA_1 >= threshold) {
return(paste("Média da 1VA:", round(media_VA_1, 1), "-- Acima da Média"))
} else {
return(paste("Média da 1VA:", round(media_VA_1, 1), "-- Abaixo da Média"))
}
}
# Mensagem para opção 2 (Média 2VA)
if (Opt == 2) {
if (Exe_2 == 0 | VA_2 == 0 | Proj == 0) {
return("Aluno não possui nota para a 2 VA")
}
if (media_VA_2 >= threshold) {
return(paste("Média da 2VA:", round(media_VA_2, 1), "-- Acima da Média"))
} else {
return(paste("Média da 2VA:", round(media_VA_2, 1), "-- Abaixo da Média"))
}
}
# Mensagem para opção 3 (Média 3VA)
if (Opt == 3) {
if (VA_3 == 0) {
return("Aluno não possui nenhuma nota -- Reprovado!!")
}
if (media_VA_3 >= threshold) {
return(paste(round(media_VA_3, 1), "-- Aprovado!!"))
} else if (media_VA_3 >= threshold / 2) {
return(paste(round(media_VA_3, 1), "-- Na Final!!"))
} else {
return(paste(round(media_VA_3, 1), "-- Reprovado!!"))
}
}
# Mensagem para opção 4 (Média Final)
if (Opt == 4) {
medias <- c(media_VA_1, media_VA_2, media_VA_3)
medias <- sort(medias, decreasing = TRUE)[1:2]  # Pega as duas maiores médias
media_final <- mean(medias)
if (media_final >= threshold) {
return(paste("Média Final:", round(media_final, 1), "-- Aprovado!!"))
} else if (media_final >= threshold / 2) {
return(paste("Média Final:", round(media_final, 1), "-- Na Final!!"))
} else {
return(paste("Média Final:", round(media_final, 1), "-- Reprovado!!"))
}
}
# Caso a opção seja inválida
stop("Opção inválida! Escolha entre 1, 2, 3 ou 4.")
}
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
