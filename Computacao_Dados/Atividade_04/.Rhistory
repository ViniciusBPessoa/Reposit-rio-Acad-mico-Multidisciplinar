getwd()
setwd("C:/Users/Pichau/Desktop/R_Studos/")
apply(iris[ , 1:4], 2, FUN = mean)
apply(iris[ , 1:4], 1, FUN = mean)
for (i in 1:4){ }
for (i in 1:4){ break }
for (i in 1:4) {next }
x = 0
a = 0
b = -5
if (a>0){
if (b<0){
x=X+5
}else iif (a>5) {
x = 0
a = 0
b = -5
if (a>0){
if (b<0){
x=X+5
}else iif (a>5) {
print(x)
print(b)
if (b<0){
x=X+5
}else if (a>5) {
x=x+4
}else {
x = x+3
}
x = 0
a = 0
b = -5
if (a>0){
if (b<0){
x=X+5
}else if (a>5) {
x=x+4
}else {
x = x+3
}
}else{
x = x+2
}
print(x)
x = 0
while(x<100){
x=x+2
}
print(x)
getwd()
setwd("C:/Users/Pichau/Desktop/R_Studos/")
getwd()
setwd("C:/Users/Pichau/Desktop/R_Studos/")
# Verificar a opção selecionada
if (Opt == 1) {
if (VA_1 == 0) {
return("Aluno não possui nota para a 1 VA")
}
return(avaliar_media(media_VA_1, threshold, "Média da 1VA:"))
} else if (Opt == 2) {
if (VA_2 == 0) {
return("Aluno não possui nota para a 2 VA")
}
return(avaliar_media(media_VA_2, threshold, "Média da 2VA:"))
} else if (Opt == 3) {
if (VA_3 == 0) {
return("Aluno não possui nenhuma nota -- Reprovado!!")
}
return(avaliar_media(media_VA_3, threshold, "Média da 3VA:"))
} else if (Opt == 4) {
return(avaliar_media(media_final, threshold, "Média Final:"))
} else {
stop("Erro: Opção inválida! Escolha entre 1, 2, 3 ou 4.")
}
minhasNotas_1 <- function(Exe_1 = 0, VA_1 = 0, Exe_2 = 0, Proj = 0, VA_2 = 0, VA_3 = 0, Opt = 1, threshold = 7) {
# Validar se as notas estão no intervalo de 0 a 10
notas <- c(Exe_1, VA_1, Exe_2, Proj, VA_2, VA_3)
if (any(notas < 0 | notas > 10)) {
stop("Erro: Todas as notas devem estar entre 0 e 10.")
}
# Substituir NAs por 0
notas <- ifelse(is.na(notas), 0, notas)
Exe_1 <- notas[1]; VA_1 <- notas[2]; Exe_2 <- notas[3]; Proj <- notas[4]; VA_2 <- notas[5]; VA_3 <- notas[6]
# Cálculo das médias ponderadas
media_VA_1 <- ((Exe_1 * 5) + (VA_1 * 5)) / 10
media_VA_2 <- ((Exe_2 * 2) + (Proj * 5) + (VA_2 * 3)) / 10
media_VA_3 <- VA_3
# Cálculo da média final (duas maiores médias)
medias <- c(media_VA_1, media_VA_2, media_VA_3)
medias <- sort(medias, decreasing = TRUE)
media_final <- mean(medias[1:2])
# Função para retornar a mensagem com base na média e no threshold
avaliar_media <- function(media, threshold, prefixo) {
if (media >= threshold) {
return(paste(prefixo, round(media, 1), "-- Aprovado!!"))
} else if (media >= threshold / 2) {
return(paste(prefixo, round(media, 1), "-- Na Final!!"))
} else {
return(paste(prefixo, round(media, 1), "-- Reprovado!!"))
}
}
# Verificar a opção selecionada
if (Opt == 1) {
if (VA_1 == 0) {
return("Aluno não possui nota para a 1 VA")
}
return(avaliar_media(media_VA_1, threshold, "Média da 1VA:"))
} else if (Opt == 2) {
if (VA_2 == 0) {
return("Aluno não possui nota para a 2 VA")
}
return(avaliar_media(media_VA_2, threshold, "Média da 2VA:"))
} else if (Opt == 3) {
if (VA_3 == 0) {
return("Aluno não possui nenhuma nota -- Reprovado!!")
}
return(avaliar_media(media_VA_3, threshold, "Média da 3VA:"))
} else if (Opt == 4) {
return(avaliar_media(media_final, threshold, "Média Final:"))
} else {
stop("Erro: Opção inválida! Escolha entre 1, 2, 3 ou 4.")
}
}
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
minhasNotas_1(Exe_1=c(10,9,7,5,10,4,NA,6,7,8,10), VA_1=8, Exe_2=c(8,5,7,8), Proj=c(7,5), VA_2=7, VA_3=9, Opt=1, threshold=8)
getwd()
setwd("C:/Users/Pichau/Desktop/R_Studos/")
getwd()
setwd("C:/Users/Pichau/Desktop/R_Studos/")
# Verificar o diretório de trabalho atual
getwd()
# Alterar o diretório de trabalho (corrigido)
setwd("C:/Users/Pichau/Desktop/Faculdade/Projects/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Atividade_04")
# Carregar o dataset
sparrows_data <- read.csv("Sparrows.csv")
# Visualizar as primeiras linhas do dataset
head(sparrows_data)
# Corrigir a leitura do arquivo com sep=","
Sparrows <- read.table(file = "Sparrows.csv", header = TRUE, sep = ",")
# Exibir os dados
View(Sparrows)
read.table(file = "Sparrows.csv", header = TRUE)
# Corrigir a leitura do arquivo com sep=","
Sparrows <- read.table(file = "Sparrows.csv", header = TRUE)
# Exibir os dados
View(Sparrows)
# Filtrar os dados para a espécie "SSTS"
SSTS_data <- subset(Sparrows, Species == "SSTS")
# Determinar o tamanho mínimo e máximo da variável "Head"
min_head <- min(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
max_head <- max(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
# Exibir os resultados
cat("Tamanho mínimo da cabeça (SSTS):", min_head, "\n")
cat("Tamanho máximo da cabeça (SSTS):", max_head, "\n")
# Filtrar os dados para a espécie "SSTS"
SSTS_data <- subset(Sparrows, Species == "SSTS")
# Determinar o tamanho mínimo e máximo da variável "Head"
min_head <- min(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
max_head <- max(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
# Corrigir a leitura do arquivo com sep=","
Sparrows <- read.table(file = "Sparrows.csv", header = TRUE, sep = ",")
# Filtrar os dados para a espécie "SSTS"
SSTS_data <- subset(Sparrows, Species == "SSTS")
# Determinar o tamanho mínimo e máximo da variável "Head"
min_head <- min(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
max_head <- max(SSTS_data$Head, na.rm = TRUE) # Ignorar valores NA
# Exibir os resultados
cat("Tamanho mínimo da cabeça (SSTS):", min_head, "\n")
cat("Tamanho máximo da cabeça (SSTS):", max_head, "\n")
# Identificar linhas duplicadas
duplicadas <- Sparrows[duplicated(Sparrows), ]
# Exibir as linhas duplicadas
duplicadas
# Verificar os níveis do fator Sex
levels(Sparrows$Sex)
# Ajustar os níveis para "Male" e "Female"
Sparrows$Sex <- factor(Sparrows$Sex,
levels = c("Male", "Female", "Femal", "M", "F"),
labels = c("Male", "Female", "Female", "Male", "Female"))
# Verificar os níveis corrigidos
levels(Sparrows$Sex)
# Calcular a média do tarso para pardais femininos
media_tarso_female <- mean(Sparrows$Tarsus[Sparrows$Sex == "Female"], na.rm = TRUE)
# Calcular a média do tarso para pardais masculinos
media_tarso_male <- mean(Sparrows$Tarsus[Sparrows$Sex == "Male"], na.rm = TRUE)
# Exibir os resultados
cat("Média do tarso (Female):", media_tarso_female, "\n")
cat("Média do tarso (Male):", media_tarso_male, "\n")
# Exibir os valores originais de Tarsus
Sparrows$Tarsus
# Substituir os NAs com os valores 59, 56.5, e 57 (nessa ordem)
valores_substituicao <- c(59, 56.5, 57)
Sparrows$Tarsus[is.na(Sparrows$Tarsus)] <- valores_substituicao
# Verificar a substituição
Sparrows$Tarsus
# Calcular a média das asas (Wing)
media_asas <- mean(Sparrows$Wing, na.rm = TRUE)
# Exibir o resultado
cat("Média das asas dos pardais:", media_asas, "\n")
